plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    // Cloth Config
    modApi "me.shedaniel.cloth:cloth-config-fabric:15.0.140"

    // Mod Menu
    modApi "com.terraformersmc:modmenu:11.0.3"
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
        datagen {
            client()
            setConfigName("Fabric DataGen")
            ideConfigGenerated(true)
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("$rootDir/fabric/src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=heavyinventories"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir "$rootDir/fabric/src/generated/resources"
        }
    }
}